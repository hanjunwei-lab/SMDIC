View(summary)
plotCoocMutex (maffile = maf, mutcell.summary = summary,
cellnumcuoff =3)
heatmapcell(gene = "TP53", mutcell = mutcell, cellmatrix = cellmatrix, mutmatrix = mutmatrix,main = "hh")
heatmapcell(gene = "TP53", mutcell = mutcell, cellmatrix = cellmatrix, mutmatrix = mutmatrix,main = "TP53")
devtools::load_all(".")
devtools::document()
library(SMDIC)
?oncoplot
library(SMDICData)
data("BRCAexpr")
data("BRCAsurv")
maf <- system.file("extdata", "BRCA.maf", package = "SMDICData")
cellmatrix <- exp2cell(BRCAexpr, method = "ssGSEA")
mutmatrix <- maf2matrix(maffile = maf,
percent = 0.01,
nonsynonymous = TRUE)
mutcell <-
mutcorcell (
cell = cellmatrix,
mutmatrix = mutmatrix,
samfdr.cutoff = 0.05,
nperms = 10,
fisher.cutoff = 0.05,
fisher.adjust = T
)
summary <-
mutcellsummary(mutcell = mutcell,
mutmatrix = mutmatrix,
cellmatrix = cellmatrix)
gene2cellsummary <- gene2cellsummary (gene = "TP53", mutcell = mutcell)
plotwaterfall (
maffile = maf,
mutcell.summary = summary,
cellnumcuoff = 4
)
plotwaterfall (
maffile = maf,
mutcell.summary = summary,
cellnumcuoff = 3
)
plotCoocMutex (
maffile = maf,
mutcell.summary = summary,
cellnumcuoff = 3
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(SMDIC)
library(SMDIC)
#get breast cancer gene expression profile.
exp.example<-GetExampleData("exp.example")
# perform the exp2cell method. Method must be one of "xCell","ssGSEA" and "CIBERSORT".
cellmatrix.example<-exp2cell(exp.example,method="ssGSEA")
#get the result of the exp2cell function
#view first six rows and six colmns of cell abundance matrix.
cellmatrix.example[1:6,1:6]
exp.example<-GetExampleData("exp.example")
data("BRCAexpr")
data("BRCAsurv")
plotwaterfall (
maffile = maf,
mutcell.summary = summary,
cellnumcuoff = 3
)
?oncoplot
?SMDICData
devtools::install("E:/SMDIC_0.1.3.tar.gz")
devtools::install_local("E:/SMDIC_0.1.3.tar.gz")
devtools::install_local("E:/foreign_0.8-80.tar.gz")
devtools::document()
devtools::load_all(".")
library(SMDIC)
remove.packages("SMDIC", lib="~/R/win-library/3.6")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
install.packages("tibble")
devtools::load_all(".")
library(samr)
install.packages("tibble")
library(samr)
devtools::load_all(".")
library(SMDIC)
#' mutcell<-GetExampleData("mutcell")
#'
#' # get cell abundance matrix which is the result of exp2cell function
#' cellmatrix<-GetExampleData("cellmatrix")
#'
#' # get survival data
#' surv<-GetExampleData("surv")
#'
#' #draw Kaplan–Meier curves
#' survcell(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv)
survcell <-
function(gene,
mutcell,
cellmatrix,
surv,
method = "Multivariate",
legend.title = "Strata",
legend.labs = c("group=0", "group=1"),
palette = c("#E7B800", "#2E9FDF"),
pval = TRUE) {
mutcell <- mutcell$mut_cell
cellgene <- names(which(mutcell[gene, ] == 1))
colnames(surv) <- c("Samples", "Survival", "Events")
cellmatrix.gene <- cellmatrix[cellgene, ]
if (method == "Multivariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Multivariate")
} else if (method == "Univariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Univariate")
} else {
print("method must be one of 'Univariate'and'Multivariate'.")
}
label <-
getCoefExpCluster(coxRes = cox.gene,
subprof2 = cellmatrix,
subprof = cellmatrix.gene)
rownames(label) <- label[, 1]
KMdata <-
getKMdata(subprof2 = cellmatrix,
clin2 = surv ,
label2 = label)
fit <- survfit(Surv(Survival, Events) ~ group, data = KMdata)
ggsurvplot(fit,
data = KMdata,
palette = palette,
legend.title=legend.title,
legend.labs=legend.labs,
pval = pval)
}
rm(survcell())
rm(survcell
)
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
library(SMDIC)
devtools::document()
devtools::load_all(".")
devtools::document()
?ggsurvplot
?colorRampPalette
?pheatmap
library(devtools)
devtools::document()
devtools::document()
library(pheatmap)
devtools::document()
?pheatmap
# Create test matrix
test = matrix(rnorm(200), 20, 10)
test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
colnames(test) = paste("Test", 1:10, sep = "")
rownames(test) = paste("Gene", 1:20, sep = "")
# Draw heatmaps
pheatmap(test)
layout(matrix(c(1,2,3),3,1,byrow=TRUE))
pheatmap(test)
pheatmap(test)
pheatmap(test)
plot(1:10)
layout(matrix(c(1,2,3),3,1,byrow=TRUE))
plot(1:10)
plot(1:10)
plot(1:10)
layout(matrix(c(1,2,3),3,1,byrow=TRUE))
pheatmap(test)
pheatmap(test)
pheatmap(test)
library(ComplexHeatmap)
p1<-pheatmap(test)
p2<-pheatmap(test)
p3<-pheatmap(test)
ht_list = p1 %v% p2 %v% p2
library(ComplexHeatmap)
ht_list = p1 %v% p2 %v% p2
plot_list=list()
plot_list[1]=p1
plot_list[["1"]]=p1
plot_list=list()
plot_list[["1"]]=p1
plot_list[["2"]]=p2
plot_list[["3"]]=p3
g<-do.call(grid.arrange,plot_list)
library(grid)
g<-do.call(grid.arrange,plot_list)
library(pdp)
install.packages("gdp")
install.packages("pdp")
library(pdp)
g<-do.call(grid.arrange,plot_list)
library(gridExtra); library(pheatmap)
m <- matrix(c(1:4), ncol=2)
n <- matrix(c(1,1,1,2), ncol=2)
a <- list(pheatmap(m)[[4]])
a[[2]] <- pheatmap(n)[[4]]
z <- do.call(grid.arrange,a)
plot(z)
m <- matrix(c(1:4), ncol=2)
n <- matrix(c(1,1,1,2), ncol=2)
a <- list(pheatmap(m)[[4]])
a[[2]] <- pheatmap(n)[[4]]
z <- do.call(grid.arrange,a)
mn <- list(m, n)
a <- list()
for(i in 1:length(mn)){
a[i] <- list(pheatmap(mn[[i]])[[4]])
}
z <- do.call(grid.arrange,a)
plot(z)
a <- list(pheatmap(m)[[4]])
a[[2]] <- pheatmap(n)[[4]]
a[[3]] <- pheatmap(n)[[4]]
a[[4]] <- pheatmap(n)[[4]]
z <- do.call(grid.arrange,a)
z <- do.call(grid.arrange,a,ncol=1)
z <- do.call(grid.arrange,ncol=1,a)
z <- do.call(grid.arrange,nrow=1,a)
grid.arrange(
p1,
p2,
p3,
nrow = 1,
top = "Title of the page",
)
p1<-pheatmap(test)
p2<-pheatmap(test)
p3<-pheatmap(test)
grid.arrange(
p1,
p2,
p3,
nrow = 1,
top = "Title of the page",
)
e
e
e
e
e
e
e
# Create test matrix
test = matrix(rnorm(200), 20, 10)
test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
colnames(test) = paste("Test", 1:10, sep = "")
rownames(test) = paste("Gene", 1:20, sep = "")
library(ComplexHeatmap)
p1<-pheatmap(test)
p2<-pheatmap(test)
p3<-pheatmap(test)
grid.arrange(
p1,
p2,
p3,
nrow = 1,
top = "Title of the page",
)
grid.arrange(
p1,
p2,
p3,
nrow = 1,
top = "Title of the page",
bottom = textGrob(
"this footnote is right-justified",
gp = gpar(fontface = 3, fontsize = 9),
hjust = 1,
x = 1
)
)
?grid.arrange
library(ggplot2)
pl <- lapply(1:11, function(.x) qplot(1:10, rnorm(10), main=paste("plot", .x)))
ml <- marrangeGrob(pl, nrow=2, ncol=2)
## non-interactive use, multipage pdf
ml
ml <- marrangeGrob(pl, nrow=3, ncol=1)
## non-interactive use, multipage pdf
ml
ml <- marrangeGrob(pl, nrow=4, ncol=1)
## non-interactive use, multipage pdf
ml
pl <- list(p1,p2,p3,p4)
ml <- marrangeGrob(pl, nrow=4, ncol=1)
pl <- list(p1,p2,p3)
ml <- marrangeGrob(pl, nrow=4, ncol=1)
## non-interactive use, multipage pdf
ml
pl <- list(p1,p2,p3)
ml <- marrangeGrob(pl, nrow=3, ncol=1)
## non-interactive use, multipage pdf
ml
grid.arrange
?grid.arrange
devtools::document()
devtools::document()
install.packages("ibrary(VennDiagram)")
install.packages("VennDiagram")
install.packages("VennDiagram")
install.packages("VennDiagram")
install.packages("VennDiagram")
install.packages(VennDiagram)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("GSVA"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GSVA")
install.packages(samr)
install.packages('samr')
install.packages('samr')
install.packages('e1071')
install.packages('preprocessCore')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("preprocessCore")
install.packages('pheatmap')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
install.packages('survminer')
install.packages('pracma')
install.packages('quadprog')
install.packages('Biostrings')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
install.packages('impute')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute")
library(SMDIC)
library(SMDIC)
library(SMDIC)
library(SMDIC)
?read.maf
devtools::load_all(".")
library(SMDIC)
library(SMDIC)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(SMDIC)
devtools::document()
??roxygen
??RoxygenNote
devtools::document()
devtools::load_all(".")
library(SMDIC)
devtools::document()
devtools::document()
load("~/00_Projects/han/SMDIC/data/envData.rda")
View(envData)
load("~/00_Projects/han/SMDIC/data/xCell.data.rda")
View(xCell.data)
load("~/00_Projects/han/SMDIC/R/sysdata.rda")
View(immunelist)
devtools::document()
install.packages('GSVA')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GSVA")
install.packages('SAMR')
install.packages('samr')
install.packages('e1071')
install.packages('pheatmap')
install.packages('maftools')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
install.packages('survminer')
install.packages('survminer')
install.packages('pracma')
install.packages('GSEABase')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GSEABase")
library(SMDIC)
library(SMDIC)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
library(SMDIC)
library(SMDIC)
library(SMDIC)
library(SMDIC)
library(SMDIC)
library(SMDIC)
library(SMDIC)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages('fastmap')
install.packages('fastmap')
install.packages("fastmap")
library(SMDIC)
devtools::load_all(".")
library(SMDIC)
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::load_all(".")
library(SMDIC)
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual1.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual1.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual1.pdf --force --no-preview')
install.packages('tinytex')
tinytex::install_tinytex()
install.packages('tinytex')
tinytex::install_tinytex()
install.packages("tinytex")
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::load_all(".")
library(SMDIC)
devtools::load_all(".")
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')、
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')、
devtools::load_all(".")
devtools::load_all(".")
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')、
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::load_all(".")
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::load_all(".")
library(SMDIC)
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
library(SMDIC)
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::load_all(".")
library(SMDIC)
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
library(GSVA)
library(GSVA)
p <- 1000
n <- 30
y <- matrix(rnorm(10000), nrow=p, ncol=n,
dimnames=list(paste0("g", 1:p), paste0("s", 1:n)))
gs <- list(set1=sample(rownames(y), size=10), set2=sample(1:p, size=20))
es <- gsva(y, gs, verbose=FALSE)
gsvaPar <- gsvaParam(y, gs)
es <- gsva(gsvaPar, verbose=FALSE)
?gsva
devtools::load_all(".")
？exp2cell
?exp2cell
exp.example<-GetExampleData("exp.example")
cellmatrix<-exp2cell(exp=exp.example,method="ssGSEA") #cell abundance matrix
library(GSVA)
library(GSVAdata)
install.packages(GSVAdata)
install.packages('GSVAdata')
library(GSVA)
library(GSVAdata)
devtools::load_all(".")
cellmatrix<-exp2cell(exp=exp.example,method="ssGSEA") #cell abundance matrix
library(SMDIC)
cellmatrix<-exp2cell(exp=exp.example,method="ssGSEA") #cell abundance matrix
devtools::load_all(".")
cellmatrix<-exp2cell(exp=exp.example,method="ssGSEA") #cell abundance matrix
library(SMDIC)
library(SMDIC)
cellmatrix<-exp2cell(exp=exp.example,method="ssGSEA") #cell abundance matrix
View(cellmatrix)
devtools::document()
devtools::document()
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
Sys.getenv('PATH')
Sys.getenv('PATH')
Sys.getenv('PATH')
Sys.getenv('PATH')
devtools::load_all(".")
library(SMDIC)
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
install.packages('tinytex')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
tinytex::install_tinytex()
tinytex::install_tinytex()
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
tinytex::uninstall_tinytex()
tinytex::install_tinytex()\
tinytex::install_tinytex()
tinytex::install_tinytex()
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
