conf.int = TRUE,
# Add risk table
risk.table = TRUE,
tables.height = 0.2,
tables.theme = theme_cleantable(),
# Color palettes. Use custom color: c("#E7B800", "#2E9FDF"),
# or brewer color (e.g.: "Dark2"), or ggsci color (e.g.: "jco")
palette = c("#E7B800", "#2E9FDF"),
ggtheme = theme_bw() # Change ggplot2 theme
)
# Customized survival curves
ggsurvplot(fit, data = lung,
surv.median.line = "hv", # Add medians survival
# Change legends: title & labels
legend.title = "Sex",
legend.labs = c("Male", "Female"),
# Add p-value and tervals
pval = TRUE,
conf.int = TRUE,
# Add risk table
risk.table = TRUE,
tables.height = 0.2,
tables.theme = theme_cleantable(),
# Color palettes. Use custom color: c("#E7B800", "#2E9FDF"),
# or brewer color (e.g.: "Dark2"), or ggsci color (e.g.: "jco")
palette = c("#E7B800", "#2E9FDF"),
ggtheme = theme_bw() # Change ggplot2 theme
)
survcell1(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv,main ="hahha")
#' @importFrom survival Surv
#' @importFrom grDevices rgb
#' @importFrom survminer ggsurvplot
#' @importFrom stats sd
#' @export
#' @examples
#' mutcell<-GetExampleData("mutcell") # The result of `mutcorcell` function.
#' cellmatrix<-GetExampleData("cellmatrix") # Cell abundance matrix
#' surv<-GetExampleData("surv") # The survival data
#' survcell(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv)
survcell1 <-
function(gene,
mutcell,
cellmatrix,
surv,
method = "Multivariate",
legend.title = "Strata",
legend.labs = c("group=0", "group=1")
palette = c("#E7B800", "#2E9FDF"),
pval = TRUE,
...) {
mutcell <- mutcell$mut_cell
cellgene <- names(which(mutcell[gene, ] == 1))
colnames(surv) <- c("Samples", "Survival", "Events")
cellmatrix.gene <- cellmatrix[cellgene, ]
if (method == "Multivariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Multivariate")
} else if (method == "Univariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Univariate")
} else {
print("method must be one of 'Univariate'and'Multivariate'.")
}
label <-
getCoefExpCluster(coxRes = cox.gene,
subprof2 = cellmatrix,
subprof = cellmatrix.gene)
rownames(label) <- label[, 1]
KMdata <-
getKMdata(subprof2 = cellmatrix,
clin2 = surv ,
label2 = label)
fit <- survfit(Surv(Survival, Events) ~ group, data = KMdata)
ggsurvplot(fit,
data = KMdata,
palette = palette,
legend.title=legend.title,
legend.labs=legend.labs,
pval = pval)
}
#' @importFrom survival Surv
#' @importFrom grDevices rgb
#' @importFrom survminer ggsurvplot
#' @importFrom stats sd
#' @export
#' @examples
#' mutcell<-GetExampleData("mutcell") # The result of `mutcorcell` function.
#' cellmatrix<-GetExampleData("cellmatrix") # Cell abundance matrix
#' surv<-GetExampleData("surv") # The survival data
#' survcell(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv)
survcell1 <-
function(gene,
mutcell,
cellmatrix,
surv,
method = "Multivariate",
legend.title = "Strata",
legend.labs = c("group=0", "group=1"),
palette = c("#E7B800", "#2E9FDF"),
pval = TRUE,
...) {
mutcell <- mutcell$mut_cell
cellgene <- names(which(mutcell[gene, ] == 1))
colnames(surv) <- c("Samples", "Survival", "Events")
cellmatrix.gene <- cellmatrix[cellgene, ]
if (method == "Multivariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Multivariate")
} else if (method == "Univariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Univariate")
} else {
print("method must be one of 'Univariate'and'Multivariate'.")
}
label <-
getCoefExpCluster(coxRes = cox.gene,
subprof2 = cellmatrix,
subprof = cellmatrix.gene)
rownames(label) <- label[, 1]
KMdata <-
getKMdata(subprof2 = cellmatrix,
clin2 = surv ,
label2 = label)
fit <- survfit(Surv(Survival, Events) ~ group, data = KMdata)
ggsurvplot(fit,
data = KMdata,
palette = palette,
legend.title=legend.title,
legend.labs=legend.labs,
pval = pval)
}
#' @importFrom survival Surv
#' @importFrom grDevices rgb
#' @importFrom survminer ggsurvplot
#' @importFrom stats sd
#' @export
#' @examples
#' mutcell<-GetExampleData("mutcell") # The result of `mutcorcell` function.
#' cellmatrix<-GetExampleData("cellmatrix") # Cell abundance matrix
#' surv<-GetExampleData("surv") # The survival data
#' survcell(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv)
survcell1 <-
function(gene,
mutcell,
cellmatrix,
surv,
method = "Multivariate",
legend.title = "Strata",
legend.labs = c("group=0", "group=1"),
palette = c("#E7B800", "#2E9FDF"),
pval = TRUE,
...) {
mutcell <- mutcell$mut_cell
cellgene <- names(which(mutcell[gene, ] == 1))
colnames(surv) <- c("Samples", "Survival", "Events")
cellmatrix.gene <- cellmatrix[cellgene, ]
if (method == "Multivariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Multivariate")
} else if (method == "Univariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Univariate")
} else {
print("method must be one of 'Univariate'and'Multivariate'.")
}
label <-
getCoefExpCluster(coxRes = cox.gene,
subprof2 = cellmatrix,
subprof = cellmatrix.gene)
rownames(label) <- label[, 1]
KMdata <-
getKMdata(subprof2 = cellmatrix,
clin2 = surv ,
label2 = label)
fit <- survfit(Surv(Survival, Events) ~ group, data = KMdata)
ggsurvplot(fit,
data = KMdata,
palette = palette,
legend.title=legend.title,
legend.labs=legend.labs,
pval = pval)
}
survcell1(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv,main ="hahha")
survcell1(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv)
#' @importFrom survival Surv
#' @importFrom grDevices rgb
#' @importFrom survminer ggsurvplot
#' @importFrom stats sd
#' @export
#' @examples
#' mutcell<-GetExampleData("mutcell") # The result of `mutcorcell` function.
#' cellmatrix<-GetExampleData("cellmatrix") # Cell abundance matrix
#' surv<-GetExampleData("surv") # The survival data
#' survcell(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv)
survcell1 <-
function(gene,
mutcell,
cellmatrix,
surv,
method = "Multivariate",
legend.title = "Strata",
legend.labs = c("group=0", "group=1"),
palette = c("#E7B800", "#2E9FDF"),
pval = TRUE) {
mutcell <- mutcell$mut_cell
cellgene <- names(which(mutcell[gene, ] == 1))
colnames(surv) <- c("Samples", "Survival", "Events")
cellmatrix.gene <- cellmatrix[cellgene, ]
if (method == "Multivariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Multivariate")
} else if (method == "Univariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Univariate")
} else {
print("method must be one of 'Univariate'and'Multivariate'.")
}
label <-
getCoefExpCluster(coxRes = cox.gene,
subprof2 = cellmatrix,
subprof = cellmatrix.gene)
rownames(label) <- label[, 1]
KMdata <-
getKMdata(subprof2 = cellmatrix,
clin2 = surv ,
label2 = label)
fit <- survfit(Surv(Survival, Events) ~ group, data = KMdata)
ggsurvplot(fit,
data = KMdata,
palette = palette,
legend.title=legend.title,
legend.labs=legend.labs,
pval = pval)
}
survcell1(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv)
mutcell<-GetExampleData("mutcell") # The result of `mutcorcell` function.
cellmatrix<-GetExampleData("cellmatrix") # Cell abundance matrix
surv<-GetExampleData("surv") # The survival data
survcell1(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv)
library(SMDIC)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(SMDIC)
knitr::include_graphics("../inst/workflow.jpg")
#Flow diagram of SMDIC.
knitr::include_graphics("../inst/workflow.jpg")
library(SMDIC)
#get breast cancer gene expression profile.
exp.example<-GetExampleData("exp.example")
# perform the exp2cell method. Method must be one of "xCell","ssGSEA" and "CIBERSORT".
#cellmatrix.example<-exp2cell(exp.example,method="ssGSEA")
#get the result of the exp2cell function
#view first six rows and six colmns of cell abundance matrix.
cellmatrix.example[1:6,1:6]
mutcell$mut_cell_cellresponses
devtools::load_all(".")
library(SMDIC)
exp.example<-GetExampleData("exp.example")
rm exp.example
rm(exp.example)
library(SMDIC)
library(SMDIC)
#get breast cancer gene expression profile.
exp.example<-GetExampleData("exp.example")
# perform the exp2cell method. Method must be one of "xCell","ssGSEA" and "CIBERSORT".
#cellmatrix.example<-exp2cell(exp.example,method="ssGSEA")
#get the result of the exp2cell function
#view first six rows and six colmns of cell abundance matrix.
cellmatrix.example[1:6,1:6]
library(SMDIC)
#get breast cancer gene expression profile.
exp.example<-GetExampleData("exp.example")
# perform the exp2cell method. Method must be one of "xCell","ssGSEA" and "CIBERSORT".
cellmatrix.example<-exp2cell(exp.example,method="ssGSEA")
#get the result of the exp2cell function
#view first six rows and six colmns of cell abundance matrix.
cellmatrix.example[1:6,1:6]
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
library(SMDIC)
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::document()
devtools:::build_manual()
devtools::build_manual()
devtools::document()
devtools::load_all(".")
library(SMDIC)
library(SMDICData)
data("BRCAexpr")
data("BRCAsurv")
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
View(BRCAsurv)
devtools::load_all(".")
browseVignettes("SMDIC")
devtools::document()
devtools::load_all(".")
library(SMDIC)
devtools::document()
devtools::load_all(".")
library(SMDIC)
library(SMDICData)
data("BRCAexpr")
data("BRCAsurv")
maf<- system.file("extdata", "BRCA.maf", package = "SMDICData")
library(SMDCI)
library(SMDIC)
cellmatrix<-exp2cell(BRCAexpr)
?exp2cell
cellmatrix<-exp2cell(BRCAexpr,method = "ssGSEA")
mutcell<-mutcorcell (cell = cellmatrix, mutmatrix = mutmatrix, samfdr.cutoff = 0.05, nperms = 1000,
fisher.cutoff=0.05, fisher.adjust=T)
mutmatrix<-maf2matrix(maffile = maf, percent = 0.01,
nonsynonymous = TRUE)
mutmatrix<-maf2matrix(maffile = maf, percent = 0.01,
nonsynonymous = TRUE)
dim(mutmatrix)
View(mutmatrix)
mutcell<-mutcorcell (cell = cellmatrix, mutmatrix = mutmatrix, samfdr.cutoff = 0.05, nperms = 1000,
fisher.cutoff=0.05, fisher.adjust=T)
mutcell<-mutcorcell (cell = cellmatrix, mutmatrix = mutmatrix, samfdr.cutoff = 0.05, nperms = 10,
fisher.cutoff=0.05, fisher.adjust=T)
summary<-mutcellsummary(mutcell = mutcell, mutmatrix=mutmatrix, cellmatrix=cellmatrix)
gene2cellsummary <-gene2cellsummary (gene="TP53", mutcell=mutcell)
plotwaterfall (maffile = maf, mutcell.summary= summary,
cellnumcuoff = 3)
plotCoocMutex (maffile = "TCGA.BRCA.varscan.somatic.maf", mutcell.summary = summary,
cellnumcuoff =3)
plotCoocMutex (maffile = maf, mutcell.summary = summary,
cellnumcuoff =3)
plotCoocMutex (maffile = maf, mutcell.summary = summary,
cellnumcuoff =4)
heatmapcell(gene = "TP53", mutcell = mutcell, cellmatrix = cellmatrix, mutmatrix = mutmatrix)
survcell (gene ="TP53", mutcell=mutcell, cellmatrix=cellmatrix, surv=surv, method = "Multivariate")
survcell (gene ="TP53", mutcell=mutcell, cellmatrix=cellmatrix, surv=BRCAsurv, method = "Multivariate")
View(summary)
plotCoocMutex (maffile = maf, mutcell.summary = summary,
cellnumcuoff =3)
heatmapcell(gene = "TP53", mutcell = mutcell, cellmatrix = cellmatrix, mutmatrix = mutmatrix,main = "hh")
heatmapcell(gene = "TP53", mutcell = mutcell, cellmatrix = cellmatrix, mutmatrix = mutmatrix,main = "TP53")
devtools::load_all(".")
devtools::document()
library(SMDIC)
?oncoplot
library(SMDICData)
data("BRCAexpr")
data("BRCAsurv")
maf <- system.file("extdata", "BRCA.maf", package = "SMDICData")
cellmatrix <- exp2cell(BRCAexpr, method = "ssGSEA")
mutmatrix <- maf2matrix(maffile = maf,
percent = 0.01,
nonsynonymous = TRUE)
mutcell <-
mutcorcell (
cell = cellmatrix,
mutmatrix = mutmatrix,
samfdr.cutoff = 0.05,
nperms = 10,
fisher.cutoff = 0.05,
fisher.adjust = T
)
summary <-
mutcellsummary(mutcell = mutcell,
mutmatrix = mutmatrix,
cellmatrix = cellmatrix)
gene2cellsummary <- gene2cellsummary (gene = "TP53", mutcell = mutcell)
plotwaterfall (
maffile = maf,
mutcell.summary = summary,
cellnumcuoff = 4
)
plotwaterfall (
maffile = maf,
mutcell.summary = summary,
cellnumcuoff = 3
)
plotCoocMutex (
maffile = maf,
mutcell.summary = summary,
cellnumcuoff = 3
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(SMDIC)
library(SMDIC)
#get breast cancer gene expression profile.
exp.example<-GetExampleData("exp.example")
# perform the exp2cell method. Method must be one of "xCell","ssGSEA" and "CIBERSORT".
cellmatrix.example<-exp2cell(exp.example,method="ssGSEA")
#get the result of the exp2cell function
#view first six rows and six colmns of cell abundance matrix.
cellmatrix.example[1:6,1:6]
exp.example<-GetExampleData("exp.example")
data("BRCAexpr")
data("BRCAsurv")
plotwaterfall (
maffile = maf,
mutcell.summary = summary,
cellnumcuoff = 3
)
?oncoplot
?SMDICData
devtools::install("E:/SMDIC_0.1.3.tar.gz")
devtools::install_local("E:/SMDIC_0.1.3.tar.gz")
devtools::install_local("E:/foreign_0.8-80.tar.gz")
devtools::document()
devtools::load_all(".")
library(SMDIC)
remove.packages("SMDIC", lib="~/R/win-library/3.6")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
install.packages("tibble")
devtools::load_all(".")
library(samr)
install.packages("tibble")
library(samr)
devtools::load_all(".")
library(SMDIC)
#' mutcell<-GetExampleData("mutcell")
#'
#' # get cell abundance matrix which is the result of exp2cell function
#' cellmatrix<-GetExampleData("cellmatrix")
#'
#' # get survival data
#' surv<-GetExampleData("surv")
#'
#' #draw Kaplan–Meier curves
#' survcell(gene ="TP53",mutcell=mutcell,cellmatrix=cellmatrix,surv=surv)
survcell <-
function(gene,
mutcell,
cellmatrix,
surv,
method = "Multivariate",
legend.title = "Strata",
legend.labs = c("group=0", "group=1"),
palette = c("#E7B800", "#2E9FDF"),
pval = TRUE) {
mutcell <- mutcell$mut_cell
cellgene <- names(which(mutcell[gene, ] == 1))
colnames(surv) <- c("Samples", "Survival", "Events")
cellmatrix.gene <- cellmatrix[cellgene, ]
if (method == "Multivariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Multivariate")
} else if (method == "Univariate") {
cox.gene <-
getUniOrMultiCOXAnalysis(subprof = cellmatrix.gene,
clin = surv,
method = "Univariate")
} else {
print("method must be one of 'Univariate'and'Multivariate'.")
}
label <-
getCoefExpCluster(coxRes = cox.gene,
subprof2 = cellmatrix,
subprof = cellmatrix.gene)
rownames(label) <- label[, 1]
KMdata <-
getKMdata(subprof2 = cellmatrix,
clin2 = surv ,
label2 = label)
fit <- survfit(Surv(Survival, Events) ~ group, data = KMdata)
ggsurvplot(fit,
data = KMdata,
palette = palette,
legend.title=legend.title,
legend.labs=legend.labs,
pval = pval)
}
rm(survcell())
rm(survcell
)
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
library(SMDIC)
devtools::document()
devtools::load_all(".")
devtools::document()
?ggsurvplot
?colorRampPalette
?pheatmap
